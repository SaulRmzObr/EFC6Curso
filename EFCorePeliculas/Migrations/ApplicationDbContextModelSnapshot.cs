// <auto-generated />
using System;
using EFCorePeliculas;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace EFCorePeliculas.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EFCorePeliculas.Entidades.Actor", b =>
                {
                    b.Property<int>("idActor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idActor"), 1L, 1);

                    b.Property<DateTime?>("dFechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("sBiografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sNombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("idActor");

                    b.ToTable("Actores");

                    b.HasData(
                        new
                        {
                            idActor = 1,
                            dFechaNacimiento = new DateTime(1996, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sBiografia = "Thomas Stanley Holland (Kingston upon Thames, Londres; 1 de junio de 1996), conocido simplemente como Tom Holland, es un actor, actor de voz y bailarín británico.",
                            sNombre = "Tom Holland"
                        },
                        new
                        {
                            idActor = 2,
                            dFechaNacimiento = new DateTime(1948, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sBiografia = "Samuel Leroy Jackson (Washington D. C., 21 de diciembre de 1948), conocido como Samuel L. Jackson, es un actor y productor de cine, televisión y teatro estadounidense. Ha sido candidato al premio Óscar, a los Globos de Oro y al Premio del Sindicato de Actores, así como ganador de un BAFTA al mejor actor de reparto.",
                            sNombre = "Samuel L. Jackson"
                        },
                        new
                        {
                            idActor = 3,
                            dFechaNacimiento = new DateTime(1965, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sBiografia = "Robert John Downey Jr. (Nueva York, 4 de abril de 1965) es un actor, actor de voz, productor y cantante estadounidense. Inició su carrera como actor a temprana edad apareciendo en varios filmes dirigidos por su padre, Robert Downey Sr., y en su infancia estudió actuación en varias academias de Nueva York.",
                            sNombre = "Robert Downey Jr."
                        },
                        new
                        {
                            idActor = 4,
                            dFechaNacimiento = new DateTime(1981, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sNombre = "Chris Evans"
                        },
                        new
                        {
                            idActor = 5,
                            dFechaNacimiento = new DateTime(1972, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sNombre = "Dwayne Johnson"
                        },
                        new
                        {
                            idActor = 6,
                            dFechaNacimiento = new DateTime(2000, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sNombre = "Auli'i Cravalho"
                        },
                        new
                        {
                            idActor = 7,
                            dFechaNacimiento = new DateTime(1984, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sNombre = "Scarlett Johansson"
                        },
                        new
                        {
                            idActor = 8,
                            dFechaNacimiento = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sNombre = "Keanu Reeves"
                        });
                });

            modelBuilder.Entity("EFCorePeliculas.Entidades.Cine", b =>
                {
                    b.Property<int>("idCine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCine"), 1L, 1);

                    b.Property<Point>("Ubicacion")
                        .HasColumnType("geography");

                    b.Property<string>("sNombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("idCine");

                    b.ToTable("Cines");

                    b.HasData(
                        new
                        {
                            idCine = 4,
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.939248 18.469649)"),
                            sNombre = "Acropolis"
                        },
                        new
                        {
                            idCine = 2,
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.911582 18.482455)"),
                            sNombre = "Sambil"
                        },
                        new
                        {
                            idCine = 3,
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.856309 18.506662)"),
                            sNombre = "Megacentro"
                        },
                        new
                        {
                            idCine = 1,
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.9388777 18.4839233)"),
                            sNombre = "Agora Mall"
                        });
                });

            modelBuilder.Entity("EFCorePeliculas.Entidades.CineOferta", b =>
                {
                    b.Property<int>("idCineOferta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCineOferta"), 1L, 1);

                    b.Property<int>("CineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dFechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("dFechaInicio")
                        .HasColumnType("date");

                    b.Property<decimal>("dPorcentajeDescuento")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("idCineOferta");

                    b.HasIndex("CineId")
                        .IsUnique();

                    b.ToTable("CinesOfertas");

                    b.HasData(
                        new
                        {
                            idCineOferta = 2,
                            CineId = 4,
                            dFechaFin = new DateTime(2022, 8, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            dFechaInicio = new DateTime(2022, 8, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            dPorcentajeDescuento = 15m
                        },
                        new
                        {
                            idCineOferta = 1,
                            CineId = 1,
                            dFechaFin = new DateTime(2022, 8, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            dFechaInicio = new DateTime(2022, 8, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            dPorcentajeDescuento = 10m
                        });
                });

            modelBuilder.Entity("EFCorePeliculas.Entidades.Genero", b =>
                {
                    b.Property<int>("idGenero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idGenero"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("idGenero");

                    b.ToTable("Generos");

                    b.HasData(
                        new
                        {
                            idGenero = 1,
                            Nombre = "Acción"
                        },
                        new
                        {
                            idGenero = 2,
                            Nombre = "Animación"
                        },
                        new
                        {
                            idGenero = 3,
                            Nombre = "Comedia"
                        },
                        new
                        {
                            idGenero = 4,
                            Nombre = "Ciencia ficción"
                        },
                        new
                        {
                            idGenero = 5,
                            Nombre = "Drama"
                        });
                });

            modelBuilder.Entity("EFCorePeliculas.Entidades.Pelicula", b =>
                {
                    b.Property<int>("idPelicula")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPelicula"), 1L, 1);

                    b.Property<bool>("bSiNoCartelera")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dFechaEstreno")
                        .HasColumnType("date");

                    b.Property<string>("sPosterUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("sTitulo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("idPelicula");

                    b.ToTable("Peliculas");

                    b.HasData(
                        new
                        {
                            idPelicula = 1,
                            bSiNoCartelera = false,
                            dFechaEstreno = new DateTime(2012, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sPosterUrl = "https://upload.wikimedia.org/wikipedia/en/8/8a/The_Avengers_%282012_film%29_poster.jpg",
                            sTitulo = "Avengers"
                        },
                        new
                        {
                            idPelicula = 2,
                            bSiNoCartelera = false,
                            dFechaEstreno = new DateTime(2017, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sPosterUrl = "https://upload.wikimedia.org/wikipedia/en/9/98/Coco_%282017_film%29_poster.jpg",
                            sTitulo = "Coco"
                        },
                        new
                        {
                            idPelicula = 3,
                            bSiNoCartelera = false,
                            dFechaEstreno = new DateTime(2021, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sPosterUrl = "https://upload.wikimedia.org/wikipedia/en/0/00/Spider-Man_No_Way_Home_poster.jpg",
                            sTitulo = "Spider-Man: No way home"
                        },
                        new
                        {
                            idPelicula = 4,
                            bSiNoCartelera = false,
                            dFechaEstreno = new DateTime(2019, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sPosterUrl = "https://upload.wikimedia.org/wikipedia/en/0/00/Spider-Man_No_Way_Home_poster.jpg",
                            sTitulo = "Spider-Man: Far From Home"
                        },
                        new
                        {
                            idPelicula = 5,
                            bSiNoCartelera = true,
                            dFechaEstreno = new DateTime(2100, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            sPosterUrl = "https://upload.wikimedia.org/wikipedia/en/5/50/The_Matrix_Resurrections.jpg",
                            sTitulo = "The Matrix Resurrections"
                        });
                });

            modelBuilder.Entity("EFCorePeliculas.Entidades.PeliculaActor", b =>
                {
                    b.Property<int>("PeliculaId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("iOrden")
                        .HasColumnType("int");

                    b.Property<string>("sPersonaje")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PeliculaId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("PeliculasActores");

                    b.HasData(
                        new
                        {
                            PeliculaId = 4,
                            ActorId = 2,
                            iOrden = 2,
                            sPersonaje = "Samuel L. Jackson"
                        },
                        new
                        {
                            PeliculaId = 4,
                            ActorId = 1,
                            iOrden = 1,
                            sPersonaje = "Peter Parker"
                        },
                        new
                        {
                            PeliculaId = 3,
                            ActorId = 1,
                            iOrden = 1,
                            sPersonaje = "Peter Parker"
                        },
                        new
                        {
                            PeliculaId = 1,
                            ActorId = 3,
                            iOrden = 2,
                            sPersonaje = "Iron Man"
                        },
                        new
                        {
                            PeliculaId = 1,
                            ActorId = 7,
                            iOrden = 3,
                            sPersonaje = "Black Widow"
                        },
                        new
                        {
                            PeliculaId = 1,
                            ActorId = 4,
                            iOrden = 1,
                            sPersonaje = "Capitán América"
                        },
                        new
                        {
                            PeliculaId = 5,
                            ActorId = 8,
                            iOrden = 1,
                            sPersonaje = "Neo"
                        });
                });

            modelBuilder.Entity("EFCorePeliculas.Entidades.SalaDeCine", b =>
                {
                    b.Property<int>("idSalaCine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idSalaCine"), 1L, 1);

                    b.Property<int>("CineId")
                        .HasColumnType("int");

                    b.Property<int>("TipoSalaDeCine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("dPrecio")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("idSalaCine");

                    b.HasIndex("CineId");

                    b.ToTable("SalasDeCine");

                    b.HasData(
                        new
                        {
                            idSalaCine = 5,
                            CineId = 3,
                            TipoSalaDeCine = 1,
                            dPrecio = 250m
                        },
                        new
                        {
                            idSalaCine = 6,
                            CineId = 3,
                            TipoSalaDeCine = 2,
                            dPrecio = 330m
                        },
                        new
                        {
                            idSalaCine = 7,
                            CineId = 3,
                            TipoSalaDeCine = 3,
                            dPrecio = 450m
                        },
                        new
                        {
                            idSalaCine = 8,
                            CineId = 4,
                            TipoSalaDeCine = 1,
                            dPrecio = 250m
                        },
                        new
                        {
                            idSalaCine = 1,
                            CineId = 1,
                            TipoSalaDeCine = 1,
                            dPrecio = 220m
                        },
                        new
                        {
                            idSalaCine = 2,
                            CineId = 1,
                            TipoSalaDeCine = 2,
                            dPrecio = 320m
                        },
                        new
                        {
                            idSalaCine = 3,
                            CineId = 2,
                            TipoSalaDeCine = 1,
                            dPrecio = 200m
                        },
                        new
                        {
                            idSalaCine = 4,
                            CineId = 2,
                            TipoSalaDeCine = 2,
                            dPrecio = 290m
                        });
                });

            modelBuilder.Entity("GeneroPelicula", b =>
                {
                    b.Property<int>("GenerosidGenero")
                        .HasColumnType("int");

                    b.Property<int>("PeliculasidPelicula")
                        .HasColumnType("int");

                    b.HasKey("GenerosidGenero", "PeliculasidPelicula");

                    b.HasIndex("PeliculasidPelicula");

                    b.ToTable("GeneroPelicula");

                    b.HasData(
                        new
                        {
                            GenerosidGenero = 1,
                            PeliculasidPelicula = 1
                        },
                        new
                        {
                            GenerosidGenero = 4,
                            PeliculasidPelicula = 1
                        },
                        new
                        {
                            GenerosidGenero = 2,
                            PeliculasidPelicula = 2
                        },
                        new
                        {
                            GenerosidGenero = 4,
                            PeliculasidPelicula = 3
                        },
                        new
                        {
                            GenerosidGenero = 1,
                            PeliculasidPelicula = 3
                        },
                        new
                        {
                            GenerosidGenero = 3,
                            PeliculasidPelicula = 3
                        },
                        new
                        {
                            GenerosidGenero = 4,
                            PeliculasidPelicula = 4
                        },
                        new
                        {
                            GenerosidGenero = 1,
                            PeliculasidPelicula = 4
                        },
                        new
                        {
                            GenerosidGenero = 3,
                            PeliculasidPelicula = 4
                        },
                        new
                        {
                            GenerosidGenero = 4,
                            PeliculasidPelicula = 5
                        },
                        new
                        {
                            GenerosidGenero = 1,
                            PeliculasidPelicula = 5
                        },
                        new
                        {
                            GenerosidGenero = 5,
                            PeliculasidPelicula = 5
                        });
                });

            modelBuilder.Entity("PeliculaSalaDeCine", b =>
                {
                    b.Property<int>("PeliculasidPelicula")
                        .HasColumnType("int");

                    b.Property<int>("SalasDeCineidSalaCine")
                        .HasColumnType("int");

                    b.HasKey("PeliculasidPelicula", "SalasDeCineidSalaCine");

                    b.HasIndex("SalasDeCineidSalaCine");

                    b.ToTable("PeliculaSalaDeCine");

                    b.HasData(
                        new
                        {
                            PeliculasidPelicula = 5,
                            SalasDeCineidSalaCine = 3
                        },
                        new
                        {
                            PeliculasidPelicula = 5,
                            SalasDeCineidSalaCine = 4
                        },
                        new
                        {
                            PeliculasidPelicula = 5,
                            SalasDeCineidSalaCine = 1
                        },
                        new
                        {
                            PeliculasidPelicula = 5,
                            SalasDeCineidSalaCine = 2
                        },
                        new
                        {
                            PeliculasidPelicula = 5,
                            SalasDeCineidSalaCine = 5
                        },
                        new
                        {
                            PeliculasidPelicula = 5,
                            SalasDeCineidSalaCine = 6
                        },
                        new
                        {
                            PeliculasidPelicula = 5,
                            SalasDeCineidSalaCine = 7
                        });
                });

            modelBuilder.Entity("EFCorePeliculas.Entidades.CineOferta", b =>
                {
                    b.HasOne("EFCorePeliculas.Entidades.Cine", null)
                        .WithOne("CineOferta")
                        .HasForeignKey("EFCorePeliculas.Entidades.CineOferta", "CineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCorePeliculas.Entidades.PeliculaActor", b =>
                {
                    b.HasOne("EFCorePeliculas.Entidades.Actor", "Actor")
                        .WithMany("PeliculasActores")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCorePeliculas.Entidades.Pelicula", "Pelicula")
                        .WithMany("PeliculasActores")
                        .HasForeignKey("PeliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Pelicula");
                });

            modelBuilder.Entity("EFCorePeliculas.Entidades.SalaDeCine", b =>
                {
                    b.HasOne("EFCorePeliculas.Entidades.Cine", "Cine")
                        .WithMany("SalasDeCine")
                        .HasForeignKey("CineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cine");
                });

            modelBuilder.Entity("GeneroPelicula", b =>
                {
                    b.HasOne("EFCorePeliculas.Entidades.Genero", null)
                        .WithMany()
                        .HasForeignKey("GenerosidGenero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCorePeliculas.Entidades.Pelicula", null)
                        .WithMany()
                        .HasForeignKey("PeliculasidPelicula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeliculaSalaDeCine", b =>
                {
                    b.HasOne("EFCorePeliculas.Entidades.Pelicula", null)
                        .WithMany()
                        .HasForeignKey("PeliculasidPelicula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCorePeliculas.Entidades.SalaDeCine", null)
                        .WithMany()
                        .HasForeignKey("SalasDeCineidSalaCine")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCorePeliculas.Entidades.Actor", b =>
                {
                    b.Navigation("PeliculasActores");
                });

            modelBuilder.Entity("EFCorePeliculas.Entidades.Cine", b =>
                {
                    b.Navigation("CineOferta");

                    b.Navigation("SalasDeCine");
                });

            modelBuilder.Entity("EFCorePeliculas.Entidades.Pelicula", b =>
                {
                    b.Navigation("PeliculasActores");
                });
#pragma warning restore 612, 618
        }
    }
}
